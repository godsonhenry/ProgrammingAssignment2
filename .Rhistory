setwd("ProgrammingAssignment2")
source("cachematrix.R")
makeCacheMatrix=function(x=matrix()) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (class(y)!=matrix("matrix",1,1)){
print("please input a matrix")
}else{
if (nrow(y)!=ncol(y)){
print("please input a square matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
}
set=function(y) {
if (class(y)!=matrix("matrix",1,1)){
print("please input a matrix")
}else{
if (nrow(y)!=ncol(y)){
print("please input a square matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
makeCacheMatrix=function(x=matrix()) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
cacheSolve=function(x, ...) {
s=x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data=x$get()
s=solve(data, ...)
x$setsolve(s)
s
}
x=matrix(1:9,3,3)
makeCacheMatrix(x)
x=matrix(1:4,2,2)
makeCacheMatrix(x)
xr=makeCacheMatrix(x)
cacheSolveï¼ˆxr
cacheSolve(xr)
cacheSolve(xr)
x=matrix(c(1,2,3,4,5,6,7,8,10),3,3)
xr=makeCacheMatrix(x)
cacheSolve(xr)
cacheSolve(xr)
makeCacheMatrix <- function(x = matrix()) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
cacheSolve <- function(x, ...) {
s=x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data=x$get()
s=solve(data, ...)
x$setsolve(s)
s
}
x=matrix(1:4,2,2)
makeCacheMatrix(x)
x=matrix(1:9,3,3)
makeCacheMatrix(x)
x=matrix(1:4,2,2)
xr=makeCacheMatrix(x)
CacheSolve(xr)
cacheSolve(xr)
cacheSolve(xr)
cacheSolve(xr)
x=c(1,2,3,4,5,6,7,8,10)
xr=makeCacheMatrix(x)
x=matrix(x)
x
det(x)
x=matrix(1:6,3,2)
x
solve(x)
det(x)
makeCacheMatrix <- function(x = matrix()) {
if (nrow(x)!=ncol(x)){
print("please input a square inverisible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (nrow(y)!=ncol(y)){
print("please input a square inverisible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
}
makeCacheMatrix <- function(x = matrix()) {
if (nrow(x)!=ncol(x)){
print("please input a square inverisible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (nrow(y)!=ncol(y)){
print("please input a square inverisible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
}
makeCacheMatrix <- function(x = matrix()) {
if (nrow(x)!=ncol(x)){
print("please input a square inverisible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (nrow(y)!=ncol(y)){
print("please input a square inverisible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
}
cacheSolve <- function(x, ...) {
s=x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data=x$get()
s=solve(data, ...)
x$setsolve(s)
s
}
x=c(1,2,3,4,5,6,7,8,10)
xr=makeCacheMatrix(x)
x=c(1,2,3,4,5,6,7,8,10)
makeCacheMatrix(x)
matrix(x)
nrow(x)
ncol(x)
x=matrix(x)
ncol(x)
nrow(x)
x=c(1,2,3)
makeCacheMatrix(x)
traceback
makeCacheMatrix(matrix(x))
makeCacheMatrix <- function(x = matrix()) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
x=c(1,2,3,4,5,6,7)
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
cacheSolve <- function(x, ...) {
s=x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data=x$get()
s=solve(data, ...)
x$setsolve(s)
s
}
x=matrix(1:6,3,2)
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
if (nrow(x)!=ncol(x)){
print("please input a square inversible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (det(x)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
x=matrix(1:6,3,3)
makeCacheMatrix(x)
x
x=matrix(1:4,2,2)
makeCacheMatrix(x)
xr=makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
s=x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data=x$get()
s=solve(data, ...)
x$setsolve(s)
s
}
cacheSolve(xr)
cacheSolve(xr)
x=matrix(1:9,3,3)
x
makeCacheMatrix(x)
makeVector <- function(x = numeric()) {
m <- NULL
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x=c(1,2,3)
makVector(x)
makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
makeCacheMatrix <- function(x = matrix()) {
if (nrow(x)!=ncol(x)){
print("please input a square inversible matrix")
}else{
if (det(x)==0){
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {
if (det(y)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
}
x=matrix(1:6,2,3)
makeCacheMatrix(x)
x=matrix(1:9,2,3)
x=matrix(1:9,3,3)
makeCacheMatrix(x)
x=matrix(c(1,2,3,4,5,6,7,8,10),3,3)
xr=makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
s=x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data=x$get()
s=solve(data, ...)
x$setsolve(s)
s
}
cacheSolve(xr)
cacheSolve(xr)
cacheSolve(xr)
x=matrix(c(1,2,3,4,5,6,7,8,10),3,3)
makeCacheMatrix <- function(x = matrix()) {
if (nrow(x)!=ncol(x)){                                         ## judge whether input is square
print("please input a square inversible matrix")
}else{
if (det(x)==0){                                             ## judge whether input is inversible
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {                                        ## build up set function and prepare for future input
if (nrow(x)!=ncol(x)){                               ## judge input again
print("please input a square inversible matrix")
}else{
if (det(y)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
}
makeCacheMatrix <- function(x = matrix()) {
if (nrow(x)!=ncol(x)){                                         ## judge whether input is square
print("please input a square inversible matrix")
}else{
if (det(x)==0){                                             ## judge whether input is inversible
print("please input a square inversible matrix")
}else{
s=NULL
set=function(y) {                                        ## build up set function and prepare for future input
if (nrow(x)!=ncol(x)){                               ## judge input again
print("please input a square inversible matrix")
}else{
if (det(y)==0){
print("please input a square inversible matrix")
}else{
x <<- y
s <<- NULL
}
}
}
get=function() x
setsolve=function(solve) s <<- solve
getsolve <- function() s
list(set=set, get=get,
setsolve=setsolve,
getsolve=getsolve)
}
}
}
cacheSolve <- function(x, ...) {
s=x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data=x$get()
s=solve(data, ...)
x$setsolve(s)
s
}
x=matrix(1:9,3,3)
makeCacheMatrix(x)
x=matrix(1:4,2,3)
x
makeCacheMatrix(x)
x=matrix(c(1,2,3,4,5,6,7,8,10),3,3)
xr=makeCacheMatrix(x)
cacheSolve(xr)
cacheSolve(xr)
x=matrix(1:4,2,2)
xr=makeCacheMatrix(x)
cacheSolve(xr)
cacheSolve(xr)
